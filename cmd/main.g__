package main

import (
	"log"
	"os"
	"os/exec"
	"time"

	"github.com/fsnotify/fsnotify"
)

var (
	lessCmd *exec.Cmd
)

func main() {
	// Define the path to the JSON file you want to watch
	filePath := "your_file.json"

	// Create a new filesystem watcher
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	// Start watching the JSON file for changes
	err = watcher.Add(filePath)
	if err != nil {
		log.Fatal(err)
	}

	// Create a channel to receive file change events
	events := make(chan fsnotify.Event)

	// Start a goroutine to listen for file change events
	go func() {
		for {
			select {
			case event, ok := <-watcher.Events:
				if !ok {
					return
				}
				// Check if the event is a modification of the JSON file
				if event.Op&fsnotify.Write == fsnotify.Write {
					events <- event
				}
			case err, ok := <-watcher.Errors:
				if !ok {
					return
				}
				log.Println("error:", err)
			}
		}
	}()

	// Loop to handle file change events
	for {
		select {
		case event := <-events:
			log.Println("File modified:", event.Name)

			// Close the previously opened less instance (if any)
			// exec.Command("pkill", "less").Run()
			if lessCmd != nil {
				err := lessCmd.Process.Kill()
				if err != nil {
					panic(err)
				}
			}

			// Open the JSON file with less
			lessCmd = exec.Command("less", filePath)
			lessCmd.Stdout = os.Stdout
			lessCmd.Stdin = os.Stdin
			lessCmd.Stderr = os.Stderr
			err := lessCmd.Run()
			if err != nil {
				log.Println("Error running less:", err)
			}

		case <-time.After(1 * time.Second):
			// Polling interval to check for changes
		}
	}
}
